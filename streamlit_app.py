import io
import os
import streamlit as st
from converter import convert_json_to_text, convert_html_to_text

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="Telegram ‚Üí Text", layout="centered")

# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ---
lang = st.sidebar.radio(
    label="–Ø–∑—ã–∫ / Language",
    options=["–†—É—Å—Å–∫–∏–π", "English"],
    index=0
)

# --- –¢–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
if lang == "–†—É—Å—Å–∫–∏–π":
    texts = {
        "title": "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Telegram-—ç–∫—Å–ø–æ—Ä—Ç–æ–≤",
        "sidebar_header": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "opt_replies": "–í–∫–ª—é—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–∞—Ö",
        "opt_forwards": "–í–∫–ª—é—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞—Ö",
        "opt_reactions": "–í–∫–ª—é—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–∫—Ü–∏—è—Ö (emoji√ócount)",
        "opt_anonymize": "–ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ (user[ID])",
        "upload_label": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ Telegram-—ç–∫—Å–ø–æ—Ä—Ç–∞ (JSON –∏–ª–∏ HTML)",
        "min_len": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∏–º–≤–æ–ª–æ–≤)",
        "format": "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞",
        "fmt_txt": "txt (–æ–±—ã—á–Ω—ã–π)",
        "fmt_md": "md (markdown)",
        "btn_convert": "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å",
        "preview_header": "üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "download_label": "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "success": "–ì–æ—Ç–æ–≤–æ! –°–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {count}",
        "stop": "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "stopped": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    }
else:
    texts = {
        "title": "Telegram Export Converter",
        "sidebar_header": "Additional Options",
        "opt_replies": "Include reply info",
        "opt_forwards": "Include forward info",
        "opt_reactions": "Include reactions (emoji√ócount)",
        "opt_anonymize": "Anonymize authors (user[ID])",
        "upload_label": "Upload Telegram export file (JSON or HTML)",
        "min_len": "Minimum message length (chars)",
        "format": "Output format",
        "fmt_txt": "txt (plain)",
        "fmt_md": "md (markdown)",
        "btn_convert": "Convert",
        "preview_header": "üìã Preview Output",
        "download_label": "Download result",
        "success": "Done! Messages saved: {count}",
        "stop": "üõë Stop application",
        "stopped": "Application stopped"
    }

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title(texts["title"])

# --- –°–∞–π–¥–±–∞—Ä: –æ–ø—Ü–∏–∏ ---
st.sidebar.header(texts["sidebar_header"])
include_replies = st.sidebar.checkbox(texts["opt_replies"], value=False)
include_forwards = st.sidebar.checkbox(texts["opt_forwards"], value=False)
include_reactions = st.sidebar.checkbox(texts["opt_reactions"], value=False)
anonymize = st.sidebar.checkbox(texts["opt_anonymize"], value=False)
st.sidebar.markdown("---")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
uploaded = st.file_uploader(
    texts["upload_label"],
    type=["json", "html"],
)

min_len = st.number_input(
    texts["min_len"],
    min_value=0,
    value=15,
    step=1,
)

output_fmt = st.radio(
    texts["format"],
    options=[texts["fmt_txt"], texts["fmt_md"]],
    horizontal=True,
)

if uploaded and st.button(texts["btn_convert"]):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    in_bytes = uploaded.read()
    in_mem = io.BytesIO(in_bytes)
    out_mem = io.StringIO()
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    if uploaded.name.endswith(".json"):
        convert_json_to_text(
            io.TextIOWrapper(in_mem, encoding="utf-8"),
            out_mem,
            fmt="md" if output_fmt == texts["fmt_md"] else "txt",
            include_replies=include_replies,
            include_forwards=include_forwards,
            include_reactions=include_reactions,
            anonymize=anonymize,
        )
    else:
        html_text = in_bytes.decode("utf-8", errors="ignore")
        convert_html_to_text(html_text, out_mem)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    raw = out_mem.getvalue().strip()
    blocks = [
        b for b in raw.split("\n\n")
        if len(b.splitlines()) >= 2 and len(b.splitlines()[1].strip()) >= min_len
    ]
    cleaned_text = "\n\n".join(blocks)

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    st.subheader(texts["preview_header"])
    st.text_area(texts["download_label"], cleaned_text, height=300)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
    st.success(texts["success"].format(count=len(blocks)))
    st.download_button(
        label=texts["download_label"],
        data=cleaned_text.encode("utf-8"),
        file_name="output.txt",
        mime="text/plain",
    )

# --- –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
if st.sidebar.button(texts["stop"]):
    st.warning(texts["stopped"])
    os._exit(0)
